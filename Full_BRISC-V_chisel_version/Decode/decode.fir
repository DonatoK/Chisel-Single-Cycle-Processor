;buildInfoPackage: chisel3, version: 3.1.2, scalaVersion: 2.11.12, sbtVersion: 1.1.1, builtAtString: 2018-07-25 16:52:17.431, builtAtMillis: 1532537537431
circuit decode : 
  module register_file : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip clock : UInt<1>, flip reset : UInt<1>, flip wEn : UInt<1>, flip write_data : UInt<32>, flip read_sel1 : UInt<5>, flip read_sel2 : UInt<5>, flip write_sel : UInt<5>, read_data1 : UInt<32>, read_data2 : UInt<32>}
    
    reg register_file_block : UInt<32>[32], clock @[regFile.scala 23:32]
    node _T_60 = asUInt(clock) @[regFile.scala 25:15]
    node _T_62 = eq(_T_60, UInt<1>("h01")) @[regFile.scala 25:22]
    when _T_62 : @[regFile.scala 25:31]
      node _T_63 = bits(reset, 0, 0) @[regFile.scala 26:16]
      when _T_63 : @[regFile.scala 26:23]
        register_file_block[0] <= UInt<1>("h00") @[regFile.scala 27:30]
        skip @[regFile.scala 26:23]
      else : @[regFile.scala 28:18]
        node _T_65 = bits(io.wEn, 0, 0) @[regFile.scala 29:19]
        node _T_67 = neq(io.write_sel, UInt<1>("h00")) @[regFile.scala 29:43]
        node _T_68 = and(_T_65, _T_67) @[regFile.scala 29:26]
        when _T_68 : @[regFile.scala 29:53]
          register_file_block[io.write_sel] <= io.write_data @[regFile.scala 30:43]
          skip @[regFile.scala 29:53]
        else : @[regFile.scala 32:16]
          register_file_block[UInt<1>("h00")] <= UInt<1>("h00") @[regFile.scala 33:33]
          skip @[regFile.scala 32:16]
        skip @[regFile.scala 28:18]
      skip @[regFile.scala 25:31]
    io.read_data1 <= register_file_block[io.read_sel1] @[regFile.scala 38:17]
    io.read_data2 <= register_file_block[io.read_sel2] @[regFile.scala 39:17]
    
  module decode : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip clock : UInt<1>, flip reset : UInt<1>, flip PC : UInt<20>, flip instruction : UInt<32>, flip extend_sel : UInt<2>, flip write : UInt<1>, flip write_reg : UInt<5>, flip write_data : UInt<32>, rs1_data : UInt<32>, rs2_data : UInt<32>, rd : UInt<5>, opcode : UInt<7>, funct7 : UInt<7>, funct3 : UInt<3>, extend_imm : UInt<32>, branch_target : UInt<20>, JAL_target : UInt<20>}
    
    node rs1 = bits(io.instruction, 19, 15) @[decode.scala 37:34]
    node rs2 = bits(io.instruction, 24, 20) @[decode.scala 38:34]
    node i_imm = bits(io.instruction, 31, 20) @[decode.scala 39:34]
    node s_imm_msb = bits(io.instruction, 31, 25) @[decode.scala 40:34]
    node s_imm_lsb = bits(io.instruction, 11, 7) @[decode.scala 41:34]
    node u_imm = bits(io.instruction, 31, 12) @[decode.scala 42:34]
    node i_imm_orig = bits(io.instruction, 31, 20) @[decode.scala 43:34]
    node _T_39 = bits(io.instruction, 31, 31) @[decode.scala 44:38]
    node _T_40 = bits(io.instruction, 19, 12) @[decode.scala 44:58]
    node _T_41 = bits(io.instruction, 20, 20) @[decode.scala 44:81]
    node _T_42 = bits(io.instruction, 31, 21) @[decode.scala 44:101]
    node _T_43 = cat(_T_41, _T_42) @[Cat.scala 30:58]
    node _T_44 = cat(_T_39, _T_40) @[Cat.scala 30:58]
    node uj_imm_32 = cat(_T_44, _T_43) @[Cat.scala 30:58]
    node s_imm_orig = cat(s_imm_msb, s_imm_lsb) @[Cat.scala 30:58]
    node _T_45 = bits(s_imm_msb, 6, 6) @[decode.scala 47:34]
    node _T_46 = bits(s_imm_lsb, 0, 0) @[decode.scala 47:47]
    node _T_47 = bits(s_imm_msb, 5, 0) @[decode.scala 47:60]
    node _T_48 = bits(s_imm_lsb, 4, 1) @[decode.scala 47:75]
    node _T_50 = cat(_T_48, UInt<1>("h00")) @[Cat.scala 30:58]
    node _T_51 = cat(_T_45, _T_46) @[Cat.scala 30:58]
    node _T_52 = cat(_T_51, _T_47) @[Cat.scala 30:58]
    node sb_imm_orig = cat(_T_52, _T_50) @[Cat.scala 30:58]
    node _T_53 = bits(sb_imm_orig, 12, 12) @[decode.scala 48:45]
    node _T_54 = bits(_T_53, 0, 0) @[Bitwise.scala 72:15]
    node _T_57 = mux(_T_54, UInt<19>("h07ffff"), UInt<19>("h00")) @[Bitwise.scala 72:12]
    node sb_imm_32 = cat(_T_57, sb_imm_orig) @[Cat.scala 30:58]
    node u_imm_32 = cat(u_imm, UInt<12>("h00")) @[Cat.scala 30:58]
    node _T_59 = bits(i_imm_orig, 11, 11) @[decode.scala 50:44]
    node _T_60 = bits(_T_59, 0, 0) @[Bitwise.scala 72:15]
    node _T_63 = mux(_T_60, UInt<20>("h0fffff"), UInt<20>("h00")) @[Bitwise.scala 72:12]
    node _T_64 = bits(i_imm_orig, 11, 0) @[decode.scala 50:61]
    node i_imm_32 = cat(_T_63, _T_64) @[Cat.scala 30:58]
    node _T_65 = bits(s_imm_orig, 11, 11) @[decode.scala 51:44]
    node _T_66 = bits(_T_65, 0, 0) @[Bitwise.scala 72:15]
    node _T_69 = mux(_T_66, UInt<20>("h0fffff"), UInt<20>("h00")) @[Bitwise.scala 72:12]
    node s_imm_32 = cat(_T_69, s_imm_orig) @[Cat.scala 30:58]
    node _T_71 = eq(io.extend_sel, UInt<2>("h01")) @[decode.scala 55:22]
    when _T_71 : @[decode.scala 55:44]
      io.extend_imm <= s_imm_32 @[decode.scala 56:19]
      skip @[decode.scala 55:44]
    else : @[decode.scala 57:52]
      node _T_73 = eq(io.extend_sel, UInt<2>("h02")) @[decode.scala 57:30]
      when _T_73 : @[decode.scala 57:52]
        io.extend_imm <= u_imm_32 @[decode.scala 58:20]
        skip @[decode.scala 57:52]
      else : @[decode.scala 59:15]
        io.extend_imm <= i_imm_32 @[decode.scala 60:20]
        skip @[decode.scala 59:15]
    node _T_74 = bits(io.instruction, 6, 0) @[decode.scala 62:30]
    io.opcode <= _T_74 @[decode.scala 62:13]
    node _T_75 = bits(io.instruction, 31, 25) @[decode.scala 63:30]
    io.funct7 <= _T_75 @[decode.scala 63:13]
    node _T_76 = bits(io.instruction, 14, 12) @[decode.scala 64:30]
    io.funct3 <= _T_76 @[decode.scala 64:13]
    node _T_77 = bits(io.instruction, 11, 7) @[decode.scala 65:30]
    io.rd <= _T_77 @[decode.scala 65:13]
    node _T_78 = add(uj_imm_32, io.PC) @[decode.scala 66:33]
    node _T_79 = tail(_T_78, 1) @[decode.scala 66:33]
    io.JAL_target <= _T_79 @[decode.scala 66:20]
    node _T_80 = add(io.PC, sb_imm_32) @[decode.scala 67:29]
    node _T_81 = tail(_T_80, 1) @[decode.scala 67:29]
    io.branch_target <= _T_81 @[decode.scala 67:20]
    inst registerfile0 of register_file @[decode.scala 70:29]
    registerfile0.clock <= clock
    registerfile0.reset <= reset
    registerfile0.io.clock <= io.clock @[decode.scala 71:33]
    registerfile0.io.reset <= io.reset @[decode.scala 72:33]
    registerfile0.io.wEn <= io.write @[decode.scala 73:33]
    registerfile0.io.write_data <= io.write_data @[decode.scala 74:33]
    registerfile0.io.read_sel1 <= rs1 @[decode.scala 75:33]
    registerfile0.io.read_sel2 <= rs2 @[decode.scala 76:33]
    registerfile0.io.write_sel <= io.write_data @[decode.scala 77:33]
    io.rs1_data <= registerfile0.io.read_data1 @[decode.scala 79:17]
    io.rs2_data <= registerfile0.io.read_data2 @[decode.scala 80:17]
    
